// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=../mocks/mock_dal.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/ngqinzhe/ccwallet/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPostgreDal is a mock of PostgreDal interface.
type MockPostgreDal struct {
	ctrl     *gomock.Controller
	recorder *MockPostgreDalMockRecorder
	isgomock struct{}
}

// MockPostgreDalMockRecorder is the mock recorder for MockPostgreDal.
type MockPostgreDalMockRecorder struct {
	mock *MockPostgreDal
}

// NewMockPostgreDal creates a new mock instance.
func NewMockPostgreDal(ctrl *gomock.Controller) *MockPostgreDal {
	mock := &MockPostgreDal{ctrl: ctrl}
	mock.recorder = &MockPostgreDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgreDal) EXPECT() *MockPostgreDalMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockPostgreDal) Deposit(ctx context.Context, userId string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockPostgreDalMockRecorder) Deposit(ctx, userId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockPostgreDal)(nil).Deposit), ctx, userId, amount)
}

// GetTransactions mocks base method.
func (m *MockPostgreDal) GetTransactions(ctx context.Context, userId string, from, to time.Time, limit, offset int) ([]*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, userId, from, to, limit, offset)
	ret0, _ := ret[0].([]*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockPostgreDalMockRecorder) GetTransactions(ctx, userId, from, to, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockPostgreDal)(nil).GetTransactions), ctx, userId, from, to, limit, offset)
}

// GetWalletBalance mocks base method.
func (m *MockPostgreDal) GetWalletBalance(ctx context.Context, userId string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", ctx, userId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockPostgreDalMockRecorder) GetWalletBalance(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockPostgreDal)(nil).GetWalletBalance), ctx, userId)
}

// Transfer mocks base method.
func (m *MockPostgreDal) Transfer(ctx context.Context, fromUserId, toUserId string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, fromUserId, toUserId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockPostgreDalMockRecorder) Transfer(ctx, fromUserId, toUserId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockPostgreDal)(nil).Transfer), ctx, fromUserId, toUserId, amount)
}

// Withdraw mocks base method.
func (m *MockPostgreDal) Withdraw(ctx context.Context, userId string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockPostgreDalMockRecorder) Withdraw(ctx, userId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockPostgreDal)(nil).Withdraw), ctx, userId, amount)
}
